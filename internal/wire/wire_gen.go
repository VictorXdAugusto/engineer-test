// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/vitao/geolocation-tracker/internal/infrastructure/cache"
	"github.com/vitao/geolocation-tracker/internal/infrastructure/database"
	"github.com/vitao/geolocation-tracker/internal/usecase"
	"github.com/vitao/geolocation-tracker/pkg/config"
	"github.com/vitao/geolocation-tracker/pkg/logger"
)

// Injectors from wire.go:

// InitializeContainer inicializa todo o container de use cases
func InitializeContainer() (*Container, error) {
	configConfig, err := config.Load()
	if err != nil {
		return nil, err
	}
	loggerLogger := logger.NewLogger()
	db, err := database.New(configConfig, loggerLogger)
	if err != nil {
		return nil, err
	}
	userRepository := database.NewUserRepository(db, loggerLogger)
	createUserUseCase := usecase.NewCreateUserUseCase(userRepository, loggerLogger)
	positionRepository := database.NewPositionRepository(db, loggerLogger)
	redis, err := cache.NewRedis(configConfig, loggerLogger)
	if err != nil {
		return nil, err
	}
	publisher := NewRedisEventPublisher(redis, loggerLogger)
	cacheInterface := NewCacheInterface(redis)
	saveUserPositionUseCase := usecase.NewSaveUserPositionUseCase(userRepository, positionRepository, publisher, cacheInterface, loggerLogger)
	findNearbyUsersUseCase := usecase.NewFindNearbyUsersUseCase(userRepository, positionRepository, cacheInterface, loggerLogger)
	getUsersInSectorUseCase := usecase.NewGetUsersInSectorUseCase(userRepository, positionRepository, cacheInterface, loggerLogger)
	getCurrentPositionUseCase := usecase.NewGetCurrentPositionUseCase(userRepository, positionRepository, cacheInterface, loggerLogger)
	getPositionHistoryUseCase := usecase.NewGetPositionHistoryUseCase(userRepository, positionRepository, cacheInterface, loggerLogger)
	container := NewContainer(createUserUseCase, saveUserPositionUseCase, findNearbyUsersUseCase, getUsersInSectorUseCase, getCurrentPositionUseCase, getPositionHistoryUseCase)
	return container, nil
}

// InitializeDatabase inicializa apenas o banco de dados
func InitializeDatabase() (*database.DB, error) {
	configConfig, err := config.Load()
	if err != nil {
		return nil, err
	}
	loggerLogger := logger.NewLogger()
	db, err := database.New(configConfig, loggerLogger)
	if err != nil {
		return nil, err
	}
	return db, nil
}

// InitializeRedis inicializa apenas o Redis
func InitializeRedis() (*cache.Redis, error) {
	configConfig, err := config.Load()
	if err != nil {
		return nil, err
	}
	loggerLogger := logger.NewLogger()
	redis, err := cache.NewRedis(configConfig, loggerLogger)
	if err != nil {
		return nil, err
	}
	return redis, nil
}
